---
AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy an mkdocs static s3 website.
Parameters:
  FullDomainName:
    Description: FQDN for website
    Type: String
  CertificateARN:
    Type: String
    Description: The ACM Certificate ARN for your websites domain name.
  BucketName:
    Type: String
    Description: The name for your S3 bucket.
  IndexPage:
    Type: String
    Description: The page for your index document.
    Default: index.html
  ErrorPage:
    Type: String
    Description: The page for your index document.
    Default: error.html
  FunctionName:
    Type: String
    Description: Name of the lambda edge function.
    Default: mkdocs-lambda-edge-function
Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: !Ref IndexPage
          ErrorDocument: !Ref ErrorPage
        BucketName:
          Ref: BucketName
        BucketEncryption:
          ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: Bucket
        PolicyDocument:
          Id: CFOAIPolicy
          Version: 2012-10-17
          Statement:
            - Sid: Allow CloudFront OAI
              Effect: Allow
              Action: s3:GetObject
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: Bucket
                    - "/*"
              Principal:
                AWS:
                  Fn::Sub: arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                    ${OriginAccessID}
    OriginAccessID:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment:
            Ref: Bucket
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront distribution for static s3 website.
          Aliases:
          - !Ref FullDomainName
          DefaultRootObject: !Ref IndexPage
          Enabled: True
          Origins:
          - DomainName: !GetAtt Bucket.DomainName
            Id: myS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Join [ '', ["origin-access-identity/cloudfront/", !GetAtt OriginAccessID.Id ]]
          ViewerCertificate:
            AcmCertificateArn: !Ref CertificateARN
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2018
          DefaultCacheBehavior:
              LambdaFunctionAssociations:
                - EventType: origin-request
                  LambdaFunctionARN: !Join [ '', [!GetAtt LambdaEdgeFunction.Arn, ":", !GetAtt LambdaFunctionVersion.Version ]]
              AllowedMethods:
                - GET
                - HEAD
              ViewerProtocolPolicy: redirect-to-https
              Compress: True
              TargetOriginId: myS3Origin
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
    LambdaEdgeFunction:
      Type: AWS::Lambda::Function
      Properties:
        Description: "Lambda edge function for mkdocs to work on static s3 websites."
        Role: !GetAtt LambdaEdgeFunctionRole.Arn
        Handler: index.handler
        Runtime: nodejs14.x
        FunctionName: !Ref FunctionName
        Code:
          ZipFile: |
            'use strict';
            exports.handler = (event, context, callback) => {

                // Extract the request from the CloudFront event that is sent to Lambda@Edge
                var request = event.Records[0].cf.request;

                // Extract the URI from the request
                var olduri = request.uri;

                // Match any '/' that occurs at the end of a URI. Replace it with a default index
                var newuri = olduri.replace(/\/$/, '\/index.html');

                // Log the URI as received by CloudFront and the new URI to be used to fetch from origin
                console.log("Old URI: " + olduri);
                console.log("New URI: " + newuri);

                // Replace the received URI with the URI that includes the index page
                request.uri = newuri;

                // Return to CloudFront
                return callback(null, request);

            };
    LambdaEdgeFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: String
        Path: /
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 'logs:CreateLogGroup'
                  Resource: !Join [ '', ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":*"]]
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: !Join [ '', ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:/aws/lambda/", !Ref FunctionName, ":*"]]
        RoleName: LambdaEdgeFunctionRole

    LambdaFunctionVersion:
      Type: AWS::Lambda::Version
      Properties:
        FunctionName: !GetAtt LambdaEdgeFunction.Arn
